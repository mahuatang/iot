package com.soco.car.app.service;

import com.alibaba.dubbo.config.annotation.Reference;
import com.soco.car.app.api.request.BindedDeviceRequest;
import com.soco.car.app.api.request.DeviceStateRequest;
import com.soco.car.app.constants.ResponseMessageEnum;
import com.soco.car.app.constants.SOCOAppConstant;
import com.soco.car.app.constants.SOCOAppConstant;
import com.soco.car.app.utils.StartEndTime;
import com.soco.car.app.handler.BaseResponseGenerator;
import com.soco.car.app.utils.DateUtil;
import com.soco.car.device.api.DeviceApi;
import com.soco.car.device.entity.Device;
import com.soco.car.device.entity.DeviceCourseUrl;
import com.soco.car.device.entity.DeviceStatisMsg;
import com.soco.car.user.api.UserApi;
import com.soco.car.user.api.UserbinddeviceApi;
import com.soco.car.app.api.response.BaseResponse;
import com.soco.car.user.entity.User;
import com.soco.car.user.entity.Userbinddevice;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.util.Date;
import java.util.List;

@Service
public class UserbinddeviceService {
	@Reference
	public UserbinddeviceApi userbinddeviceApi;

	@Reference
	public DeviceApi deviceApi;

	@Reference
	public UserApi userApi;

	/**
	 * 绑定设备操作
	 * 
	 * @param deviceNo
	 * @param userId
	 * @return
	 */
	public BaseResponse userBindDevice(String deviceNo, Long userId) {
		Integer times = userbinddeviceApi.getDeviceBindTimes(userId);

		//检查用户绑定的车辆是否超过5
		if (times >= 5) {
			return BaseResponseGenerator.genErrorResult(SOCOAppConstant.ERROR_CODE_400,
					ResponseMessageEnum.user_bind_device_times_exceed_five.getValue());
		}

		// 根据设备编号查询设备信息
		Device device = deviceApi.selectDeviceInfoByDeviceNo(deviceNo);
		Long deviceId = device.getDeviceId();
		//检查设备是否有被其他用户绑定
		int flag = userbinddeviceApi.checkDeviceBindUser(deviceId);

		if (flag == 0) {
			Userbinddevice ubd = new Userbinddevice();
			ubd.setDeviceId(deviceId);
			ubd.setUserId(userId);
			ubd.setBindTime(new Date());
			ubd.setState("0");

			userbinddeviceApi.insertUserBindDevice(ubd);

			return BaseResponseGenerator.genSuccessResult(ResponseMessageEnum.device_bind_success.getValue());
		} else {
			return BaseResponseGenerator.genErrorResult(SOCOAppConstant.ERROR_CODE_400,
					ResponseMessageEnum.device_already_bind.getValue());
		}
	}

	/**
	 * 用户解绑设备操作
	 * 
	 * @param deviceId
	 * @param userId
	 * @return
	 */
	public BaseResponse userUnBindDevice(Long deviceId, Long userId) {
		Device deviceInfo = deviceApi.selectDeviceInfoById(deviceId);
		if (deviceInfo != null) {
			Userbinddevice ubd = new Userbinddevice();
			ubd.setDeviceId(deviceId);
			ubd.setUserId(userId);
			Userbinddevice ubdInfo = userbinddeviceApi.checkUserDeviceBind(ubd);
			if (ubdInfo != null) {
				if (ubdInfo.getState().equals("0")) {
					ubd.setBindId(ubdInfo.getBindId());
					ubd.setState("-1");
					int result = userbinddeviceApi.updateUserBindDevice(ubd);
					if (result > 0) {
						return BaseResponseGenerator.genSuccessResult(ResponseMessageEnum.device_un_bind_success);
					} else {
						return BaseResponseGenerator.genErrorResult(SOCOAppConstant.ERROR_CODE_400,
								ResponseMessageEnum.device_un_bind_fail.getValue());
					}
				} else {
					return BaseResponseGenerator.genErrorResult(SOCOAppConstant.ERROR_CODE_400,
							ResponseMessageEnum.device_un_bind_error.getValue());
				}
			}
		}

		return BaseResponseGenerator.genErrorResult(SOCOAppConstant.ERROR_CODE_400,
				ResponseMessageEnum.device_id_error.getValue());
	}

	/**
	 * 根据设备编号查询设备信息
	 * 
	 * @param deviceNo
	 * @return
	 */
	public BaseResponse selectDeviceInfo(String deviceNo) {
		Device device = deviceApi.selectDeviceInfoByDeviceNo(deviceNo);
		if (device != null) {
			return BaseResponseGenerator.genSuccessResult(device);
		} else {
			return BaseResponseGenerator.genSuccessResult(SOCOAppConstant.ERROR_CODE_400,
					ResponseMessageEnum.device_no_error.getValue());
		}
	}

	/**
	 * 查询指定设备消耗统计信息
	 * 
	 * @param deviceStateRequest
	 * @return
	 */
	public BaseResponse queryDeviceStatisMsg(DeviceStateRequest deviceStateRequest) {
		String model = deviceStateRequest.getModel();
		Integer numberValue = deviceStateRequest.getNumValue();
		Integer deviceId = deviceStateRequest.getDeviceId();
		DeviceStatisMsg info;
		if (model == null || "".equals(model)) {
			return BaseResponseGenerator.genErrorResult(SOCOAppConstant.ERROR_CODE_400,
					ResponseMessageEnum.query_model_null.getValue());
		} else {
			StartEndTime times = DateUtil.getStartEndTime(model, numberValue);

			if (times.getStartTime() == null || times.getEndTime() == null) {
				return BaseResponseGenerator.genErrorResult(SOCOAppConstant.ERROR_CODE_400,
						ResponseMessageEnum.query_model_error.getValue());
			} else {
				Date startTime = new Date();
				Date endTime = new Date();
				startTime.setTime(times.getStartTime());
				endTime.setTime(times.getEndTime());
				info = deviceApi.queryDeviceStatisMsg(deviceId, startTime, endTime);

				return BaseResponseGenerator.genSuccessResult(info);
			}
		}
	}

    /**
     * 根据用户Id查询历史绑定设备信息
     * @param binddeviceRequest
     * @return
     */
    public BaseResponse queryMyBindedDevice(BindedDeviceRequest binddeviceRequest) {
        List<Userbinddevice> list = userbinddeviceApi.queryMyBindedDevice(binddeviceRequest.getPageNum(),  binddeviceRequest.getPageSize(),  binddeviceRequest.getUserId(),  binddeviceRequest.getState());
        return BaseResponseGenerator.genSuccessResult(list);
    }

	/**
	 * 获取新手教程url
	 * 
	 * @param protype
	 * @return
	 */
	public BaseResponse getCourseUrl(String protype) {
		if (StringUtils.isNotEmpty(protype) && protype.length() > 2) {
			protype = protype.substring(0, 2);
		}
		// 原始车型找不到数据，使用默认的TS车型视频教程返回
		List<DeviceCourseUrl> list = deviceApi.getCourseUrl(protype);
		if (CollectionUtils.isEmpty(list)) {
			list = deviceApi.getCourseUrl(SOCOAppConstant.DEFAULT_CAR_MODEL_TYPE);
		}
		return BaseResponseGenerator.genSuccessResult(list);
	}
}
