/**
 * Project Name:SOCO_API
 * File Name:DynamicDataSourceAspect.java
 * Package Name:com.soco.car.dsl
 * Date:2018年6月13日上午9:55:31
 * Copyright (c) 2018, sunlangping8888@163.com All Rights Reserved
 *
*/

package com.soco.car.common.dsl;

import java.lang.reflect.Method;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

/**
 * ClassName:DynamicDataSourceAspect <br/>
 * Reason: TODO ADD REASON. <br/>
 * Date: 2018年6月13日 上午9:55:31 <br/>
 * 
 * @author sunlangping
 * @version
 * @see
 */
// @EnableAspectJAutoProxy(proxyTargetClass=true, exposeProxy=true)
//// @Order(-1)
//// @Component
//// @Aspect
// @Component
// @Order(-5)

@Aspect
@Order(-1)
@Component
public class DynamicDataSourceAspect {

	private static final Logger logger = LoggerFactory.getLogger(DynamicDataSourceAspect.class);

	@Pointcut("execution(* com.soco.car.*.service.*.*(..))")
	public void pointCut() {

	}

	/**
	 * 执行方法前更换数据源
	 *
	 * @param joinPoint
	 *            切点
	 * @param targetDataSource
	 *            动态数据源
	 */
	@Before("@annotation(targetDataSource)")
	public void doBefore(JoinPoint joinPoint, TargetDataSource targetDataSource) {
		DataSourceKey dataSourceKey = targetDataSource.dataSourceKey();
		if (dataSourceKey == DataSourceKey.MASTER) {
			if (logger.isDebugEnabled()) {
				logger.debug("设置数据源为  %s", DataSourceKey.MASTER);
			}
			DynamicDataSourceContextHolder.set(DataSourceKey.MASTER);
		} else {
			if (logger.isDebugEnabled()) {
				logger.info("使用默认数据源  %s", DataSourceKey.SLAVE);
			}
			DynamicDataSourceContextHolder.set(DataSourceKey.SLAVE);
		}
	}

	/**
	 * 执行方法后清除数据源设置
	 *
	 * @param joinPoint
	 *            切点
	 * @param targetDataSource
	 *            动态数据源
	 */
	@After("@annotation(targetDataSource)")
	public void doAfter(JoinPoint joinPoint, TargetDataSource targetDataSource) {
		if (logger.isDebugEnabled()) {
			logger.debug(String.format("当前数据源  %s  执行清理方法", targetDataSource.dataSourceKey()));
		}
		DynamicDataSourceContextHolder.clear();
	}

	@Before(value = "pointCut()")
	public void doBeforeWithSlave(JoinPoint joinPoint) {
		MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
		// 获取当前切点方法对象
		Method method = methodSignature.getMethod();
		if (method.getDeclaringClass().isInterface()) {// 判断是否为接口方法
			try {
				// 获取实际类型的方法对象
				method = joinPoint.getTarget().getClass().getDeclaredMethod(joinPoint.getSignature().getName(),
						method.getParameterTypes());
			} catch (NoSuchMethodException e) {
				logger.error("方法不存在！", e);
			}
		}
		if (null == method.getAnnotation(TargetDataSource.class)) {
			DynamicDataSourceContextHolder.setSlave();
		}
	}

}
